/************************************
  Mixins
************************************/

@mixin grid-columns($main-col: repeat(12, 1fr), $breakpoint-from: xs, $breakpoint-to: xl, $firstline-name: null, $endline-name: null) {
  $breakpoint-from-index: index(($side-widths), ($breakpoint-from map-get($side-widths, $breakpoint-from)));
  $breakpoint-to-index: index(($side-widths), ($breakpoint-to map-get($side-widths, $breakpoint-to)));

  @for $i from $breakpoint-from-index through $breakpoint-to-index {
    $breakpoint: nth(map-keys($side-widths), $i);
    $side-width: nth(map-values($side-widths), $i);

    @if $i == 1 {
      // index 1 = xs
      grid-template-columns: $firstline-name $side-width $main-col $side-width $endline-name;
    } @else {
      @include media-breakpoint-up($breakpoint) {
        grid-template-columns: $firstline-name $side-width $main-col $side-width $endline-name;
      }
    }
  }
}

@mixin position($position: relative, $top: null, $left: null, $right: null, $bottom: null) {
  position: $position;
  top: $top;
  left: $left;
  right: $right;
  bottom: $bottom;
}

@mixin font-style($color: null, $size: null, $weight: null, $mb: null) {
  color: $color;
  font-size: $size;
  font-weight: $weight;
  margin-bottom: $mb;
}

@mixin links($color: $iron-gray, $color-type: dark, $property: color) {
  #{$property}: $color;

  @if $color-type == dark {
    &:hover {
      #{$property}: lighten($color, 20%);
    }

    &:active {
      #{$property}: lighten($color, 30%);
    }
  } @else if $color-type == light {
    &:hover {
      opacity: 0.7;
    }

    &:active {
      opacity: 0.6;
    }
  }
}

@mixin imgs($width: 100%, $height: 100%, $object-fit: cover) {
  width: $width;
  height: $height;
  object-fit: $object-fit;
}

@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;
  width: 100%;

  &::before {
    display: block;
    padding-top: ($height / $width) * 100%;
    content: '';
  }

  > .content {
    @include position(absolute, 0, 0, 0, 0);
  }
}
